//用函数求一个字符串长度 
#include<stdio.h>
int my_strlen(char *str)
{
	int count=0;
	while(*str!='\0')
{
	count++;
	str++;
}
return count;
	
}
int main()
{
	char arr[]="bit";
	int len=my_strlen(arr);
	printf("len= %d\n",len);
	return 0;
}
//编写函数不创建临时变量，求字符串长度，运用递归实现 
#include<stdio.h> 
int my_strlen(char *str)
{
	if(*str !='\0')
		return 1+my_strlen(str+1);
	else
		return 0; 
}
int main()
{
	char arr[]="bit";
	int len=my_strlen(arr);
	printf("len= %d\n",len);
	return 0;
}
//用递归计算n的阶乘 
#include<stdio.h>
int Facl(int n)
{
	int ret=1;
	for(int i=1;i<=n;i++)
	{
		ret *=i;//TODO
	}
	return ret;
}
int main()
{
	int n=0;
	int ret=0;
	scanf("%d",&n);
	ret=Facl(n);
	printf("%d\n",ret);
	return 0;
	
}
//也是递归计算n的阶乘，更简单 
#include<stdio.h>
int Facl(int n)
{
	if(n<=1)
		return 1;
	else
		return n*Facl(n-1);
} 
int main()
{
	int n=0;
	int ret=0;
	scanf("%d",&n);
	ret=Facl(n);
	printf("%d\n",ret);
	return 0;
	
}
//用递归计算斐波那契数（前俩个数相加等于第三个数） 
#include<stdio.h>
 
int Fib(int n)
{
	if(n<=2)
	return 1;	//TODO
	else
	return Fib(n-1)+Fib(n-2);
}
int main()
{
	int n=0;
	scanf("%d",&n);
	int zzd=0;
	zzd=Fib(n);
	printf("%d\n",zzd);
	return 0;
}
//用更简便的递归写出 斐波那契数 ，加了循环 
#include<stdio.h>
 int Fib(int n)
{
	int a=1;
	int b=1;
	int c=1;
while(n>2)
{
c=a+b;
a=b;
b=c;
n--;
}
return c;
	
}
int main()
{
	int n=0;
	scanf("%d",&n);
	int zzd=0;
	zzd=Fib(n);
	printf("%d\n",zzd);
	return 0;
}
